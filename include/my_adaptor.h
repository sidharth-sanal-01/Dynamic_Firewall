
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__my_adaptor_h__adaptor__H__
#define __sdbuscpp__my_adaptor_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace firewall {

class server_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.firewall.server";

protected:
    server_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerMethod("addRule").onInterface(INTERFACE_NAME).withInputParamNames("input").withOutputParamNames("status").implementedAs([this](const sdbus::Struct<int32_t, std::string, std::string, std::string>& input){ return this->addRule(input); });
        object_.registerMethod("showRule").onInterface(INTERFACE_NAME).withInputParamNames("id").withOutputParamNames("output").implementedAs([this](const int32_t& id){ return this->showRule(id); });
        object_.registerMethod("deleteRule").onInterface(INTERFACE_NAME).withInputParamNames("id").withOutputParamNames("status").implementedAs([this](const int32_t& id){ return this->deleteRule(id); });
    }

    ~server_adaptor() = default;

private:
    virtual std::string addRule(const sdbus::Struct<int32_t, std::string, std::string, std::string>& input) = 0;
    virtual sdbus::Struct<int32_t, std::string, std::string, std::string> showRule(const int32_t& id) = 0;
    virtual std::string deleteRule(const int32_t& id) = 0;

private:
    sdbus::IObject& object_;
};

}} // namespaces

#endif
