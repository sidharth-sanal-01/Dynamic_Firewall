
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__my_proxy_h__proxy__H__
#define __sdbuscpp__my_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace firewall {

class server_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.firewall.server";

protected:
    server_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~server_proxy() = default;

public:
    std::string addRule(const sdbus::Struct<int32_t, std::string, std::string, std::string>& input)
    {
        std::string result;
        proxy_.callMethod("addRule").onInterface(INTERFACE_NAME).withArguments(input).storeResultsTo(result);
        return result;
    }

    sdbus::Struct<int32_t, std::string, std::string, std::string> showRule(const int32_t& id)
    {
        sdbus::Struct<int32_t, std::string, std::string, std::string> result;
        proxy_.callMethod("showRule").onInterface(INTERFACE_NAME).withArguments(id).storeResultsTo(result);
        return result;
    }

    std::string deleteRule(const int32_t& id)
    {
        std::string result;
        proxy_.callMethod("deleteRule").onInterface(INTERFACE_NAME).withArguments(id).storeResultsTo(result);
        return result;
    }

private:
    sdbus::IProxy& proxy_;
};

}} // namespaces

#endif
